ARM GAS  /tmp/ccqTA3Va.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB65:
  26              		.file 1 "Core/Src/stm32f1xx_it.c"
   1:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f1xx_it.c **** /**
   3:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Core/Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f1xx_it.c ****   * @attention
   8:Core/Src/stm32f1xx_it.c ****   *
   9:Core/Src/stm32f1xx_it.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/stm32f1xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f1xx_it.c ****   *
  12:Core/Src/stm32f1xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f1xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f1xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f1xx_it.c ****   *
  16:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f1xx_it.c ****   */
  18:Core/Src/stm32f1xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f1xx_it.c **** 
  20:Core/Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f1xx_it.c **** #include "main.h"
  22:Core/Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  23:Core/Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32f1xx_it.c **** #include "usart.h"
  26:Core/Src/stm32f1xx_it.c **** #include "gpio.h"
  27:Core/Src/stm32f1xx_it.c **** #include <string.h>
  28:Core/Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  29:Core/Src/stm32f1xx_it.c **** 
  30:Core/Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  32:Core/Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccqTA3Va.s 			page 2


  33:Core/Src/stm32f1xx_it.c **** /* USER CODE END TD */
  34:Core/Src/stm32f1xx_it.c **** 
  35:Core/Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  37:Core/Src/stm32f1xx_it.c **** 
  38:Core/Src/stm32f1xx_it.c **** /* USER CODE END PD */
  39:Core/Src/stm32f1xx_it.c **** 
  40:Core/Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  42:Core/Src/stm32f1xx_it.c **** 
  43:Core/Src/stm32f1xx_it.c **** /* USER CODE END PM */
  44:Core/Src/stm32f1xx_it.c **** 
  45:Core/Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  47:Core/Src/stm32f1xx_it.c **** 
  48:Core/Src/stm32f1xx_it.c **** /* USER CODE END PV */
  49:Core/Src/stm32f1xx_it.c **** 
  50:Core/Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  51:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  52:Core/Src/stm32f1xx_it.c **** 
  53:Core/Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  54:Core/Src/stm32f1xx_it.c **** 
  55:Core/Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  56:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  57:Core/Src/stm32f1xx_it.c **** 
  58:Core/Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  59:Core/Src/stm32f1xx_it.c **** 
  60:Core/Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  61:Core/Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart1;
  62:Core/Src/stm32f1xx_it.c **** extern char txBuffer[TX_BUFFER_SIZE];
  63:Core/Src/stm32f1xx_it.c **** extern char rxBuffer[RX_BUFFER_SIZE];
  64:Core/Src/stm32f1xx_it.c **** extern uint8_t data;
  65:Core/Src/stm32f1xx_it.c **** extern uint8_t rxDataCount;
  66:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  67:Core/Src/stm32f1xx_it.c **** 
  68:Core/Src/stm32f1xx_it.c **** /* USER CODE END EV */
  69:Core/Src/stm32f1xx_it.c **** 
  70:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
  71:Core/Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */
  72:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
  73:Core/Src/stm32f1xx_it.c **** /**
  74:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  75:Core/Src/stm32f1xx_it.c ****   */
  76:Core/Src/stm32f1xx_it.c **** void NMI_Handler(void)
  77:Core/Src/stm32f1xx_it.c **** {
  27              		.loc 1 77 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
  78:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  79:Core/Src/stm32f1xx_it.c **** 
  80:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  81:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  82:Core/Src/stm32f1xx_it.c ****   while (1)
ARM GAS  /tmp/ccqTA3Va.s 			page 3


  34              		.loc 1 82 3 discriminator 1 view .LVU1
  83:Core/Src/stm32f1xx_it.c ****   {
  84:Core/Src/stm32f1xx_it.c ****   }
  35              		.loc 1 84 3 discriminator 1 view .LVU2
  82:Core/Src/stm32f1xx_it.c ****   {
  36              		.loc 1 82 9 discriminator 1 view .LVU3
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE65:
  41              		.section	.text.HardFault_Handler,"ax",%progbits
  42              		.align	1
  43              		.global	HardFault_Handler
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  47              		.fpu softvfp
  49              	HardFault_Handler:
  50              	.LFB66:
  85:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  86:Core/Src/stm32f1xx_it.c **** }
  87:Core/Src/stm32f1xx_it.c **** 
  88:Core/Src/stm32f1xx_it.c **** /**
  89:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  90:Core/Src/stm32f1xx_it.c ****   */
  91:Core/Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  92:Core/Src/stm32f1xx_it.c **** {
  51              		.loc 1 92 1 view -0
  52              		.cfi_startproc
  53              		@ Volatile: function does not return.
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57              	.L4:
  93:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  94:Core/Src/stm32f1xx_it.c **** 
  95:Core/Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  96:Core/Src/stm32f1xx_it.c ****   while (1)
  58              		.loc 1 96 3 discriminator 1 view .LVU5
  97:Core/Src/stm32f1xx_it.c ****   {
  98:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  99:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 100:Core/Src/stm32f1xx_it.c ****   }
  59              		.loc 1 100 3 discriminator 1 view .LVU6
  96:Core/Src/stm32f1xx_it.c ****   {
  60              		.loc 1 96 9 discriminator 1 view .LVU7
  61 0000 FEE7     		b	.L4
  62              		.cfi_endproc
  63              	.LFE66:
  65              		.section	.text.MemManage_Handler,"ax",%progbits
  66              		.align	1
  67              		.global	MemManage_Handler
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu softvfp
  73              	MemManage_Handler:
  74              	.LFB67:
ARM GAS  /tmp/ccqTA3Va.s 			page 4


 101:Core/Src/stm32f1xx_it.c **** }
 102:Core/Src/stm32f1xx_it.c **** 
 103:Core/Src/stm32f1xx_it.c **** /**
 104:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
 105:Core/Src/stm32f1xx_it.c ****   */
 106:Core/Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 107:Core/Src/stm32f1xx_it.c **** {
  75              		.loc 1 107 1 view -0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.L6:
 108:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 109:Core/Src/stm32f1xx_it.c **** 
 110:Core/Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 111:Core/Src/stm32f1xx_it.c ****   while (1)
  82              		.loc 1 111 3 discriminator 1 view .LVU9
 112:Core/Src/stm32f1xx_it.c ****   {
 113:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 114:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 115:Core/Src/stm32f1xx_it.c ****   }
  83              		.loc 1 115 3 discriminator 1 view .LVU10
 111:Core/Src/stm32f1xx_it.c ****   {
  84              		.loc 1 111 9 discriminator 1 view .LVU11
  85 0000 FEE7     		b	.L6
  86              		.cfi_endproc
  87              	.LFE67:
  89              		.section	.text.BusFault_Handler,"ax",%progbits
  90              		.align	1
  91              		.global	BusFault_Handler
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu softvfp
  97              	BusFault_Handler:
  98              	.LFB68:
 116:Core/Src/stm32f1xx_it.c **** }
 117:Core/Src/stm32f1xx_it.c **** 
 118:Core/Src/stm32f1xx_it.c **** /**
 119:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 120:Core/Src/stm32f1xx_it.c ****   */
 121:Core/Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 122:Core/Src/stm32f1xx_it.c **** {
  99              		.loc 1 122 1 view -0
 100              		.cfi_startproc
 101              		@ Volatile: function does not return.
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105              	.L8:
 123:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 124:Core/Src/stm32f1xx_it.c **** 
 125:Core/Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 126:Core/Src/stm32f1xx_it.c ****   while (1)
 106              		.loc 1 126 3 discriminator 1 view .LVU13
ARM GAS  /tmp/ccqTA3Va.s 			page 5


 127:Core/Src/stm32f1xx_it.c ****   {
 128:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 129:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 130:Core/Src/stm32f1xx_it.c ****   }
 107              		.loc 1 130 3 discriminator 1 view .LVU14
 126:Core/Src/stm32f1xx_it.c ****   {
 108              		.loc 1 126 9 discriminator 1 view .LVU15
 109 0000 FEE7     		b	.L8
 110              		.cfi_endproc
 111              	.LFE68:
 113              		.section	.text.UsageFault_Handler,"ax",%progbits
 114              		.align	1
 115              		.global	UsageFault_Handler
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 119              		.fpu softvfp
 121              	UsageFault_Handler:
 122              	.LFB69:
 131:Core/Src/stm32f1xx_it.c **** }
 132:Core/Src/stm32f1xx_it.c **** 
 133:Core/Src/stm32f1xx_it.c **** /**
 134:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 135:Core/Src/stm32f1xx_it.c ****   */
 136:Core/Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 137:Core/Src/stm32f1xx_it.c **** {
 123              		.loc 1 137 1 view -0
 124              		.cfi_startproc
 125              		@ Volatile: function does not return.
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129              	.L10:
 138:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 139:Core/Src/stm32f1xx_it.c **** 
 140:Core/Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 141:Core/Src/stm32f1xx_it.c ****   while (1)
 130              		.loc 1 141 3 discriminator 1 view .LVU17
 142:Core/Src/stm32f1xx_it.c ****   {
 143:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 144:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 145:Core/Src/stm32f1xx_it.c ****   }
 131              		.loc 1 145 3 discriminator 1 view .LVU18
 141:Core/Src/stm32f1xx_it.c ****   {
 132              		.loc 1 141 9 discriminator 1 view .LVU19
 133 0000 FEE7     		b	.L10
 134              		.cfi_endproc
 135              	.LFE69:
 137              		.section	.text.SVC_Handler,"ax",%progbits
 138              		.align	1
 139              		.global	SVC_Handler
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu softvfp
 145              	SVC_Handler:
 146              	.LFB70:
ARM GAS  /tmp/ccqTA3Va.s 			page 6


 146:Core/Src/stm32f1xx_it.c **** }
 147:Core/Src/stm32f1xx_it.c **** 
 148:Core/Src/stm32f1xx_it.c **** /**
 149:Core/Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 150:Core/Src/stm32f1xx_it.c ****   */
 151:Core/Src/stm32f1xx_it.c **** void SVC_Handler(void)
 152:Core/Src/stm32f1xx_it.c **** {
 147              		.loc 1 152 1 view -0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 153:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 154:Core/Src/stm32f1xx_it.c **** 
 155:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 156:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 157:Core/Src/stm32f1xx_it.c **** 
 158:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 159:Core/Src/stm32f1xx_it.c **** }
 152              		.loc 1 159 1 view .LVU21
 153 0000 7047     		bx	lr
 154              		.cfi_endproc
 155              	.LFE70:
 157              		.section	.text.DebugMon_Handler,"ax",%progbits
 158              		.align	1
 159              		.global	DebugMon_Handler
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu softvfp
 165              	DebugMon_Handler:
 166              	.LFB71:
 160:Core/Src/stm32f1xx_it.c **** 
 161:Core/Src/stm32f1xx_it.c **** /**
 162:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 163:Core/Src/stm32f1xx_it.c ****   */
 164:Core/Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 165:Core/Src/stm32f1xx_it.c **** {
 167              		.loc 1 165 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 166:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 167:Core/Src/stm32f1xx_it.c **** 
 168:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 169:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 170:Core/Src/stm32f1xx_it.c **** 
 171:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 172:Core/Src/stm32f1xx_it.c **** }
 172              		.loc 1 172 1 view .LVU23
 173 0000 7047     		bx	lr
 174              		.cfi_endproc
 175              	.LFE71:
 177              		.section	.text.PendSV_Handler,"ax",%progbits
 178              		.align	1
 179              		.global	PendSV_Handler
ARM GAS  /tmp/ccqTA3Va.s 			page 7


 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 183              		.fpu softvfp
 185              	PendSV_Handler:
 186              	.LFB72:
 173:Core/Src/stm32f1xx_it.c **** 
 174:Core/Src/stm32f1xx_it.c **** /**
 175:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 176:Core/Src/stm32f1xx_it.c ****   */
 177:Core/Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 178:Core/Src/stm32f1xx_it.c **** {
 187              		.loc 1 178 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 179:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 180:Core/Src/stm32f1xx_it.c **** 
 181:Core/Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 182:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 183:Core/Src/stm32f1xx_it.c **** 
 184:Core/Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 185:Core/Src/stm32f1xx_it.c **** }
 192              		.loc 1 185 1 view .LVU25
 193 0000 7047     		bx	lr
 194              		.cfi_endproc
 195              	.LFE72:
 197              		.section	.text.SysTick_Handler,"ax",%progbits
 198              		.align	1
 199              		.global	SysTick_Handler
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 203              		.fpu softvfp
 205              	SysTick_Handler:
 206              	.LFB73:
 186:Core/Src/stm32f1xx_it.c **** 
 187:Core/Src/stm32f1xx_it.c **** /**
 188:Core/Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 189:Core/Src/stm32f1xx_it.c ****   */
 190:Core/Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 191:Core/Src/stm32f1xx_it.c **** {
 207              		.loc 1 191 1 view -0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211 0000 08B5     		push	{r3, lr}
 212              	.LCFI0:
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 3, -8
 215              		.cfi_offset 14, -4
 192:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 193:Core/Src/stm32f1xx_it.c **** 
 194:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 195:Core/Src/stm32f1xx_it.c ****   HAL_IncTick();
 216              		.loc 1 195 3 view .LVU27
ARM GAS  /tmp/ccqTA3Va.s 			page 8


 217 0002 FFF7FEFF 		bl	HAL_IncTick
 218              	.LVL0:
 196:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 197:Core/Src/stm32f1xx_it.c **** 
 198:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 199:Core/Src/stm32f1xx_it.c **** }
 219              		.loc 1 199 1 is_stmt 0 view .LVU28
 220 0006 08BD     		pop	{r3, pc}
 221              		.cfi_endproc
 222              	.LFE73:
 224              		.section	.text.USART1_IRQHandler,"ax",%progbits
 225              		.align	1
 226              		.global	USART1_IRQHandler
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu softvfp
 232              	USART1_IRQHandler:
 233              	.LFB74:
 200:Core/Src/stm32f1xx_it.c **** 
 201:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 202:Core/Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 203:Core/Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 204:Core/Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 205:Core/Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 206:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 207:Core/Src/stm32f1xx_it.c **** 
 208:Core/Src/stm32f1xx_it.c **** /**
 209:Core/Src/stm32f1xx_it.c ****   * @brief This function handles USART1 global interrupt.
 210:Core/Src/stm32f1xx_it.c ****   */
 211:Core/Src/stm32f1xx_it.c **** void USART1_IRQHandler(void)
 212:Core/Src/stm32f1xx_it.c **** {
 234              		.loc 1 212 1 is_stmt 1 view -0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238 0000 08B5     		push	{r3, lr}
 239              	.LCFI1:
 240              		.cfi_def_cfa_offset 8
 241              		.cfi_offset 3, -8
 242              		.cfi_offset 14, -4
 213:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 214:Core/Src/stm32f1xx_it.c **** 
 215:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 216:Core/Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 243              		.loc 1 216 3 view .LVU30
 244 0002 0248     		ldr	r0, .L18
 245 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 246              	.LVL1:
 217:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 218:Core/Src/stm32f1xx_it.c **** 
 219:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 220:Core/Src/stm32f1xx_it.c **** }
 247              		.loc 1 220 1 is_stmt 0 view .LVU31
 248 0008 08BD     		pop	{r3, pc}
 249              	.L19:
 250 000a 00BF     		.align	2
ARM GAS  /tmp/ccqTA3Va.s 			page 9


 251              	.L18:
 252 000c 00000000 		.word	huart1
 253              		.cfi_endproc
 254              	.LFE74:
 256              		.section	.rodata.HAL_UART_RxCpltCallback.str1.4,"aMS",%progbits,1
 257              		.align	2
 258              	.LC0:
 259 0000 4F464600 		.ascii	"OFF\000"
 260              		.align	2
 261              	.LC1:
 262 0004 4F4E00   		.ascii	"ON\000"
 263 0007 00       		.align	2
 264              	.LC2:
 265 0008 4F4B00   		.ascii	"OK\000"
 266              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 267              		.align	1
 268              		.global	HAL_UART_RxCpltCallback
 269              		.syntax unified
 270              		.thumb
 271              		.thumb_func
 272              		.fpu softvfp
 274              	HAL_UART_RxCpltCallback:
 275              	.LVL2:
 276              	.LFB75:
 221:Core/Src/stm32f1xx_it.c **** 
 222:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN 1 */
 223:Core/Src/stm32f1xx_it.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 277              		.loc 1 223 57 is_stmt 1 view -0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		.loc 1 223 57 is_stmt 0 view .LVU33
 282 0000 10B5     		push	{r4, lr}
 283              	.LCFI2:
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 4, -8
 286              		.cfi_offset 14, -4
 224:Core/Src/stm32f1xx_it.c ****   if (rxDataCount >= 255) {
 287              		.loc 1 224 3 is_stmt 1 view .LVU34
 288              		.loc 1 224 19 is_stmt 0 view .LVU35
 289 0002 2D4B     		ldr	r3, .L32
 290 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 291              		.loc 1 224 6 view .LVU36
 292 0006 FF2B     		cmp	r3, #255
 293 0008 2FD0     		beq	.L28
 294              	.LVL3:
 295              	.L21:
 225:Core/Src/stm32f1xx_it.c ****     rxDataCount = 0;
 226:Core/Src/stm32f1xx_it.c ****     memset(rxBuffer, 0x00, sizeof(rxBuffer));
 227:Core/Src/stm32f1xx_it.c ****   }
 228:Core/Src/stm32f1xx_it.c ****   rxBuffer[rxDataCount ++] = data;
 296              		.loc 1 228 3 is_stmt 1 view .LVU37
 297              		.loc 1 228 24 is_stmt 0 view .LVU38
 298 000a 2B4B     		ldr	r3, .L32
 299 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 300 000e 511C     		adds	r1, r2, #1
 301 0010 1970     		strb	r1, [r3]
ARM GAS  /tmp/ccqTA3Va.s 			page 10


 302              		.loc 1 228 28 view .LVU39
 303 0012 2A4B     		ldr	r3, .L32+4
 304 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 305 0016 2A49     		ldr	r1, .L32+8
 306 0018 8B54     		strb	r3, [r1, r2]
 229:Core/Src/stm32f1xx_it.c ****   if (data == 0x0A || data == 0x0D) {   // '\n' or '\r'
 307              		.loc 1 229 3 is_stmt 1 view .LVU40
 308              		.loc 1 229 6 is_stmt 0 view .LVU41
 309 001a 0A2B     		cmp	r3, #10
 310 001c 01D0     		beq	.L22
 311              		.loc 1 229 20 discriminator 1 view .LVU42
 312 001e 0D2B     		cmp	r3, #13
 313 0020 1DD1     		bne	.L23
 314              	.L22:
 230:Core/Src/stm32f1xx_it.c ****     // 处理接受数据
 231:Core/Src/stm32f1xx_it.c ****     if (!strncmp(rxBuffer, "OFF", 3)) {
 315              		.loc 1 231 5 is_stmt 1 view .LVU43
 316              		.loc 1 231 10 is_stmt 0 view .LVU44
 317 0022 0322     		movs	r2, #3
 318 0024 2749     		ldr	r1, .L32+12
 319 0026 2648     		ldr	r0, .L32+8
 320 0028 FFF7FEFF 		bl	strncmp
 321              	.LVL4:
 322              		.loc 1 231 8 view .LVU45
 323 002c 30B3     		cbz	r0, .L29
 324              	.L24:
 232:Core/Src/stm32f1xx_it.c ****       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 233:Core/Src/stm32f1xx_it.c ****     }
 234:Core/Src/stm32f1xx_it.c ****     if (!strncmp(rxBuffer, "ON", 2)) {
 325              		.loc 1 234 5 is_stmt 1 view .LVU46
 326              		.loc 1 234 10 is_stmt 0 view .LVU47
 327 002e 0222     		movs	r2, #2
 328 0030 2549     		ldr	r1, .L32+16
 329 0032 2348     		ldr	r0, .L32+8
 330 0034 FFF7FEFF 		bl	strncmp
 331              	.LVL5:
 332              		.loc 1 234 8 view .LVU48
 333 0038 50B3     		cbz	r0, .L30
 334              	.L25:
 235:Core/Src/stm32f1xx_it.c ****       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 236:Core/Src/stm32f1xx_it.c ****     }
 237:Core/Src/stm32f1xx_it.c ****     if (!strncmp(rxBuffer, "OK", 2)) {
 335              		.loc 1 237 5 is_stmt 1 view .LVU49
 336              		.loc 1 237 10 is_stmt 0 view .LVU50
 337 003a 0222     		movs	r2, #2
 338 003c 2349     		ldr	r1, .L32+20
 339 003e 2048     		ldr	r0, .L32+8
 340 0040 FFF7FEFF 		bl	strncmp
 341              	.LVL6:
 342              		.loc 1 237 8 view .LVU51
 343 0044 70B3     		cbz	r0, .L31
 344              	.L26:
 238:Core/Src/stm32f1xx_it.c ****       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 239:Core/Src/stm32f1xx_it.c ****     }
 240:Core/Src/stm32f1xx_it.c ****     sendData(rxBuffer);
 345              		.loc 1 240 5 is_stmt 1 view .LVU52
 346 0046 1E4C     		ldr	r4, .L32+8
ARM GAS  /tmp/ccqTA3Va.s 			page 11


 347 0048 2046     		mov	r0, r4
 348 004a FFF7FEFF 		bl	sendData
 349              	.LVL7:
 241:Core/Src/stm32f1xx_it.c ****     rxDataCount = 0;
 350              		.loc 1 241 5 view .LVU53
 351              		.loc 1 241 17 is_stmt 0 view .LVU54
 352 004e 0021     		movs	r1, #0
 353 0050 194B     		ldr	r3, .L32
 354 0052 1970     		strb	r1, [r3]
 242:Core/Src/stm32f1xx_it.c **** 
 243:Core/Src/stm32f1xx_it.c ****     memset(rxBuffer, 0x00, sizeof(rxBuffer));
 355              		.loc 1 243 5 is_stmt 1 view .LVU55
 356 0054 4FF48072 		mov	r2, #256
 357 0058 2046     		mov	r0, r4
 358 005a FFF7FEFF 		bl	memset
 359              	.LVL8:
 360              	.L23:
 244:Core/Src/stm32f1xx_it.c ****   }
 245:Core/Src/stm32f1xx_it.c **** 
 246:Core/Src/stm32f1xx_it.c ****   HAL_UART_Receive_IT(&huart1, &data, 1u);
 361              		.loc 1 246 3 view .LVU56
 362 005e 0122     		movs	r2, #1
 363 0060 1649     		ldr	r1, .L32+4
 364 0062 1B48     		ldr	r0, .L32+24
 365 0064 FFF7FEFF 		bl	HAL_UART_Receive_IT
 366              	.LVL9:
 247:Core/Src/stm32f1xx_it.c **** }
 367              		.loc 1 247 1 is_stmt 0 view .LVU57
 368 0068 10BD     		pop	{r4, pc}
 369              	.LVL10:
 370              	.L28:
 225:Core/Src/stm32f1xx_it.c ****     memset(rxBuffer, 0x00, sizeof(rxBuffer));
 371              		.loc 1 225 5 is_stmt 1 view .LVU58
 225:Core/Src/stm32f1xx_it.c ****     memset(rxBuffer, 0x00, sizeof(rxBuffer));
 372              		.loc 1 225 17 is_stmt 0 view .LVU59
 373 006a 0021     		movs	r1, #0
 374 006c 124B     		ldr	r3, .L32
 375 006e 1970     		strb	r1, [r3]
 226:Core/Src/stm32f1xx_it.c ****   }
 376              		.loc 1 226 5 is_stmt 1 view .LVU60
 377 0070 4FF48072 		mov	r2, #256
 378 0074 1248     		ldr	r0, .L32+8
 379              	.LVL11:
 226:Core/Src/stm32f1xx_it.c ****   }
 380              		.loc 1 226 5 is_stmt 0 view .LVU61
 381 0076 FFF7FEFF 		bl	memset
 382              	.LVL12:
 383 007a C6E7     		b	.L21
 384              	.L29:
 232:Core/Src/stm32f1xx_it.c ****     }
 385              		.loc 1 232 7 is_stmt 1 view .LVU62
 386 007c 0122     		movs	r2, #1
 387 007e 4FF40051 		mov	r1, #8192
 388 0082 00F18040 		add	r0, r0, #1073741824
 389 0086 00F58830 		add	r0, r0, #69632
 390 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 391              	.LVL13:
ARM GAS  /tmp/ccqTA3Va.s 			page 12


 392 008e CEE7     		b	.L24
 393              	.L30:
 235:Core/Src/stm32f1xx_it.c ****     }
 394              		.loc 1 235 7 view .LVU63
 395 0090 0022     		movs	r2, #0
 396 0092 4FF40051 		mov	r1, #8192
 397 0096 00F18040 		add	r0, r0, #1073741824
 398 009a 00F58830 		add	r0, r0, #69632
 399 009e FFF7FEFF 		bl	HAL_GPIO_WritePin
 400              	.LVL14:
 401 00a2 CAE7     		b	.L25
 402              	.L31:
 238:Core/Src/stm32f1xx_it.c ****     }
 403              		.loc 1 238 7 view .LVU64
 404 00a4 4FF40051 		mov	r1, #8192
 405 00a8 00F18040 		add	r0, r0, #1073741824
 406 00ac 00F58830 		add	r0, r0, #69632
 407 00b0 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 408              	.LVL15:
 409 00b4 C7E7     		b	.L26
 410              	.L33:
 411 00b6 00BF     		.align	2
 412              	.L32:
 413 00b8 00000000 		.word	rxDataCount
 414 00bc 00000000 		.word	data
 415 00c0 00000000 		.word	rxBuffer
 416 00c4 00000000 		.word	.LC0
 417 00c8 04000000 		.word	.LC1
 418 00cc 08000000 		.word	.LC2
 419 00d0 00000000 		.word	huart1
 420              		.cfi_endproc
 421              	.LFE75:
 423              		.text
 424              	.Letext0:
 425              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 426              		.file 3 "Drivers/CMSIS/Include/core_cm3.h"
 427              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 428              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 429              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 430              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 431              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 432              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 433              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 434              		.file 11 "Core/Inc/usart.h"
 435              		.file 12 "Core/Inc/stm32f1xx_it.h"
 436              		.file 13 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 437              		.file 14 "/usr/include/newlib/sys/_types.h"
 438              		.file 15 "/usr/include/newlib/sys/reent.h"
 439              		.file 16 "/usr/include/newlib/sys/lock.h"
 440              		.file 17 "/usr/include/newlib/string.h"
 441              		.file 18 "<built-in>"
ARM GAS  /tmp/ccqTA3Va.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccqTA3Va.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccqTA3Va.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccqTA3Va.s:42     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccqTA3Va.s:49     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccqTA3Va.s:66     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccqTA3Va.s:73     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccqTA3Va.s:90     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccqTA3Va.s:97     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccqTA3Va.s:114    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccqTA3Va.s:121    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccqTA3Va.s:138    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccqTA3Va.s:145    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccqTA3Va.s:158    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccqTA3Va.s:165    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccqTA3Va.s:178    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccqTA3Va.s:185    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccqTA3Va.s:198    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccqTA3Va.s:205    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccqTA3Va.s:225    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccqTA3Va.s:232    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccqTA3Va.s:252    .text.USART1_IRQHandler:000000000000000c $d
     /tmp/ccqTA3Va.s:257    .rodata.HAL_UART_RxCpltCallback.str1.4:0000000000000000 $d
     /tmp/ccqTA3Va.s:267    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccqTA3Va.s:274    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccqTA3Va.s:413    .text.HAL_UART_RxCpltCallback:00000000000000b8 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_UART_IRQHandler
huart1
strncmp
sendData
memset
HAL_UART_Receive_IT
HAL_GPIO_WritePin
HAL_GPIO_TogglePin
rxDataCount
data
rxBuffer
